{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._token = options.token;\n    this._headers = {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${this._token}`\n    };\n  }\n\n  _checkResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      console.log(response.status, response.statusText);\n    }\n  }\n\n  async getInitialCards() {\n    const response = await fetch(`${this._url}/cards`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  async editUserInfo(name, about) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n  async uploadUserCard(name, link) {\n    const response = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n  async deleteCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    return this._checkResponse(response);\n  }\n\n  async like(cardId) {\n    const response = await fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    });\n    return this._checkResponse(response);\n  }\n\n  async dislike(cardId) {\n    const response = await fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    return this._checkResponse(response);\n  }\n\n  async setUserAvatar(link) {\n    const response = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    });\n    return this._checkResponse(response);\n  }\n\n}\n\nconst api = new Api({\n  // baseUrl: 'https://api.ilanbrof.students.nomoreparties.sbs',\n  baseUrl: 'http://localhost:3000'\n});\nexport default api;","map":{"version":3,"sources":["/Users/ilan/dev/react-around-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","options","_url","baseUrl","_token","token","_headers","authorization","_checkResponse","response","ok","json","console","log","status","statusText","getInitialCards","fetch","headers","localStorage","getItem","getUserInfo","editUserInfo","name","about","method","body","JSON","stringify","uploadUserCard","link","deleteCard","cardId","like","dislike","setUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._token = options.token;\n    this._headers = {\n      'Content-type': 'application/json',\n      authorization: `Bearer ${this._token}`\n    };\n  }\n\n  _checkResponse(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      console.log(response.status, response.statusText);\n    }\n  }\n\n  async getInitialCards() {\n    const response = await fetch(`${this._url}/cards`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  async getUserInfo() {\n    const response = await fetch(`${this._url}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': `Bearer ${localStorage.getItem('jwt')}`\n      }\n    });\n    return this._checkResponse(response);\n  }\n\n  async editUserInfo(name, about) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    });\n    return this._checkResponse(response);\n  }\n\n  async uploadUserCard(name, link) {\n    const response = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({ name: name, link: link }),\n    });\n    return this._checkResponse(response);\n  }\n\n  async deleteCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    return this._checkResponse(response);\n  }\n\n  async like(cardId) {\n    const response = await fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers,\n    });\n    return this._checkResponse(response);\n  }\n\n  async dislike(cardId) {\n    const response = await fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    return this._checkResponse(response);\n  }\n\n  async setUserAvatar(link) {\n    const response = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({ avatar: link }),\n    });\n    return this._checkResponse(response);\n  }\n}\n\nconst api = new Api({\n  // baseUrl: 'https://api.ilanbrof.students.nomoreparties.sbs',\n  baseUrl: 'http://localhost:3000',\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}